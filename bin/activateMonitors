#!/usr/bin/env node

/**
 * Executes a shell command and return it as a Promise.
 * @param cmd {string}
 * @return {Promise<string>}
 */
function shell(cmd) {
  return new Promise((resolve, reject) => {
    require("child_process").exec(cmd, (error, stdout, stderr) => {
      error ? reject(error) : resolve(stdout ? stdout : stderr);
    });
  });
}

class MonitorManager {
  /**
   * Creates an instance of MonitorManager.
   * @param {Monitor[]} monitors
   * @memberof MonitorManager
   */
  constructor(monitors) {
    this.monitors = monitors;
  }

  activateMonitors() {
    this.monitors.forEach((monitor) => {
      if (monitor.isConnected) {
        monitor.activate();
        console.log(`${monitor.name} connected!`);
      }
    });
  }
}

class Monitor {
  constructor(name, side, principal) {
    this.name = name;
    this.side = side;
    this.principal = principal;
  }

  static async getPrincipalMonitor() {
    return (await shell("xrandr --query | grep primary")).split(" ")[0];
  }

  async isConnected() {
    return (await shell(`xrandr --query | grep ${this.name}`)).includes(
      "connected"
    );
  }

  async activate() {
    await shell(
      `xrandr --output ${this.name} --auto --${this.side}-of ${this.principal}`
    );
  }
}

async function main() {
  const PRINCIPAL_MONITOR = await Monitor.getPrincipalMonitor();

  const MONITOR_MANAGER = new MonitorManager([
    new Monitor("HDMI-1", "right", PRINCIPAL_MONITOR),
  ]);

  MONITOR_MANAGER.activateMonitors();
}

main();

// Predecessor: https://git.io/JEsky
